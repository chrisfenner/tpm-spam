// Run regenerate_source.sh before and commit updated generated code along with
// any changes to policy.proto.
// Alternative: Introduce use of Bazel to this simple project. Do you want that?

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: policy.proto

package policypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Comparison operator describes how to match against a given value.
// All integer comparisons are big-endian, and signed comparisons are 2's-complement.
type Comparison int32

const (
	Comparison_EQ          Comparison = 0
	Comparison_NEQ         Comparison = 1
	Comparison_SIGNED_GT   Comparison = 2
	Comparison_UNSIGNED_GT Comparison = 3
	Comparison_SIGNED_LT   Comparison = 4
	Comparison_UNSIGNED_LT Comparison = 5
	Comparison_SIGNED_GE   Comparison = 6
	Comparison_UNSIGNED_GE Comparison = 7
	Comparison_SIGNED_LE   Comparison = 8
	Comparison_UNSIGNED_LE Comparison = 9
	Comparison_BITSET      Comparison = 10
	Comparison_BITCLEAR    Comparison = 11
)

// Enum value maps for Comparison.
var (
	Comparison_name = map[int32]string{
		0:  "EQ",
		1:  "NEQ",
		2:  "SIGNED_GT",
		3:  "UNSIGNED_GT",
		4:  "SIGNED_LT",
		5:  "UNSIGNED_LT",
		6:  "SIGNED_GE",
		7:  "UNSIGNED_GE",
		8:  "SIGNED_LE",
		9:  "UNSIGNED_LE",
		10: "BITSET",
		11: "BITCLEAR",
	}
	Comparison_value = map[string]int32{
		"EQ":          0,
		"NEQ":         1,
		"SIGNED_GT":   2,
		"UNSIGNED_GT": 3,
		"SIGNED_LT":   4,
		"UNSIGNED_LT": 5,
		"SIGNED_GE":   6,
		"UNSIGNED_GE": 7,
		"SIGNED_LE":   8,
		"UNSIGNED_LE": 9,
		"BITSET":      10,
		"BITCLEAR":    11,
	}
)

func (x Comparison) Enum() *Comparison {
	p := new(Comparison)
	*p = x
	return p
}

func (x Comparison) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparison) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[0].Descriptor()
}

func (Comparison) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[0]
}

func (x Comparison) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparison.Descriptor instead.
func (Comparison) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

// A Policy represents an AND/OR policy tree describing a set of acceptable states.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Assertion:
	//	*Policy_Rule
	//	*Policy_And
	//	*Policy_Or
	Assertion isPolicy_Assertion `protobuf_oneof:"assertion"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

func (m *Policy) GetAssertion() isPolicy_Assertion {
	if m != nil {
		return m.Assertion
	}
	return nil
}

func (x *Policy) GetRule() *Rule {
	if x, ok := x.GetAssertion().(*Policy_Rule); ok {
		return x.Rule
	}
	return nil
}

func (x *Policy) GetAnd() *And {
	if x, ok := x.GetAssertion().(*Policy_And); ok {
		return x.And
	}
	return nil
}

func (x *Policy) GetOr() *Or {
	if x, ok := x.GetAssertion().(*Policy_Or); ok {
		return x.Or
	}
	return nil
}

type isPolicy_Assertion interface {
	isPolicy_Assertion()
}

type Policy_Rule struct {
	// A single leaf assertion.
	Rule *Rule `protobuf:"bytes,1,opt,name=rule,proto3,oneof"`
}

type Policy_And struct {
	// AND-aggregation of a set of sub-policies.
	And *And `protobuf:"bytes,2,opt,name=and,proto3,oneof"`
}

type Policy_Or struct {
	// OR-aggregation of a set of sub-policies.
	Or *Or `protobuf:"bytes,3,opt,name=or,proto3,oneof"`
}

func (*Policy_Rule) isPolicy_Assertion() {}

func (*Policy_And) isPolicy_Assertion() {}

func (*Policy_Or) isPolicy_Assertion() {}

// A Spam rule asserts a matcher against a sub-array of a spam.
type SpamRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The spam index (0 to 65536) to match against.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The number of bytes into the spam the first operand begins at.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The comparison operator to use for the rule.
	Comparison Comparison `protobuf:"varint,3,opt,name=comparison,proto3,enum=policy.Comparison" json:"comparison,omitempty"`
	// The second operand for the operation.
	Operand []byte `protobuf:"bytes,4,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *SpamRule) Reset() {
	*x = SpamRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpamRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpamRule) ProtoMessage() {}

func (x *SpamRule) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpamRule.ProtoReflect.Descriptor instead.
func (*SpamRule) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{1}
}

func (x *SpamRule) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SpamRule) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SpamRule) GetComparison() Comparison {
	if x != nil {
		return x.Comparison
	}
	return Comparison_EQ
}

func (x *SpamRule) GetOperand() []byte {
	if x != nil {
		return x.Operand
	}
	return nil
}

// An And policy aggregates sub-policies, requiring all children to be satisfied.
type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sub-policies to aggregate.
	Policy []*Policy `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{2}
}

func (x *And) GetPolicy() []*Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// An Or policy aggregates sub-policies, requiring at least one child to be satisfied.
type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sub-policies to aggregate.
	Policy []*Policy `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Or) GetPolicy() []*Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// A leaf rule that is some assertion against RoT state.
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Assertion:
	//	*Rule_Spam
	Assertion isRule_Assertion `protobuf_oneof:"assertion"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{4}
}

func (m *Rule) GetAssertion() isRule_Assertion {
	if m != nil {
		return m.Assertion
	}
	return nil
}

func (x *Rule) GetSpam() *SpamRule {
	if x, ok := x.GetAssertion().(*Rule_Spam); ok {
		return x.Spam
	}
	return nil
}

type isRule_Assertion interface {
	isRule_Assertion()
}

type Rule_Spam struct {
	// A rule that asserts the value of a particular spam.
	Spam *SpamRule `protobuf:"bytes,1,opt,name=spam,proto3,oneof"`
}

func (*Rule_Spam) isRule_Assertion() {}

var File_policy_proto protoreflect.FileDescriptor

var file_policy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x78, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x22, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x72, 0x48, 0x00, 0x52,
	0x02, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x86, 0x01, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x2d, 0x0a, 0x03, 0x41, 0x6e, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x2c, 0x0a, 0x02, 0x4f, 0x72, 0x12, 0x26,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3b, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x73, 0x70, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x70, 0x61, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0xb7, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45,
	0x51, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x54,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47,
	0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4c, 0x54,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4c,
	0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47,
	0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4c, 0x45,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4c,
	0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x54, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x49, 0x54, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x0b, 0x42, 0x0e, 0x5a,
	0x0c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_proto_rawDescOnce sync.Once
	file_policy_proto_rawDescData = file_policy_proto_rawDesc
)

func file_policy_proto_rawDescGZIP() []byte {
	file_policy_proto_rawDescOnce.Do(func() {
		file_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_proto_rawDescData)
	})
	return file_policy_proto_rawDescData
}

var file_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_policy_proto_goTypes = []interface{}{
	(Comparison)(0),  // 0: policy.Comparison
	(*Policy)(nil),   // 1: policy.Policy
	(*SpamRule)(nil), // 2: policy.SpamRule
	(*And)(nil),      // 3: policy.And
	(*Or)(nil),       // 4: policy.Or
	(*Rule)(nil),     // 5: policy.Rule
}
var file_policy_proto_depIdxs = []int32{
	5, // 0: policy.Policy.rule:type_name -> policy.Rule
	3, // 1: policy.Policy.and:type_name -> policy.And
	4, // 2: policy.Policy.or:type_name -> policy.Or
	0, // 3: policy.SpamRule.comparison:type_name -> policy.Comparison
	1, // 4: policy.And.policy:type_name -> policy.Policy
	1, // 5: policy.Or.policy:type_name -> policy.Policy
	2, // 6: policy.Rule.spam:type_name -> policy.SpamRule
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_policy_proto_init() }
func file_policy_proto_init() {
	if File_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpamRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_policy_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Policy_Rule)(nil),
		(*Policy_And)(nil),
		(*Policy_Or)(nil),
	}
	file_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Rule_Spam)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_policy_proto_goTypes,
		DependencyIndexes: file_policy_proto_depIdxs,
		EnumInfos:         file_policy_proto_enumTypes,
		MessageInfos:      file_policy_proto_msgTypes,
	}.Build()
	File_policy_proto = out.File
	file_policy_proto_rawDesc = nil
	file_policy_proto_goTypes = nil
	file_policy_proto_depIdxs = nil
}
